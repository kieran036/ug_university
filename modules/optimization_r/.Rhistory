C <- c(c, s)
C
cB <- C[c(X : Y)]
cB
bfs. <- x + y + 1
BFS <- A.[,c(bfs.)]
BFS
#We know fro b what the given column is which is named max. The given column  can only be between the 3rd and 2+Y th columns but I am using an extrapolated version of the tableau, which is M in the notes so that if any columns which are not the variables are selected, an error message is displayed about the dimensions not matching eg. if var <- .A.[,6] we are shown 'Error in .A.[, 6] : subscript out of bounds'.
.A. <- A.[, 1 : Y]
.A.
var <- A.[,max]
#We know fro b what the given column is which is named max. The given column  can only be between the 3rd and 2+Y th columns but I am using an extrapolated version of the tableau, which is M in the notes so that if any columns which are not the variables are selected, an error message is displayed about the dimensions not matching eg. if var <- .A.[,6] we are shown 'Error in .A.[, 6] : subscript out of bounds'.
.A. <- A.[, 1 : Y]
.A.
var <- .A.[,max]
#We know fro b what the given column is which is named max. The given column  can only be between the 3rd and 2+Y th columns but I am using an extrapolated version of the tableau, which is M in the notes so that if any columns which are not the variables are selected, an error message is displayed about the dimensions not matching eg. if var <- .A.[,6] we are shown 'Error in .A.[, 6] : subscript out of bounds'.
.A. <- A.[, 1 : Y]
.A.
var <- A.[,max]
#We know fro b what the given column is which is named max. The given column  can only be between the 3rd and 2+Y th columns but I am using an extrapolated version of the tableau, which is M in the notes so that if any columns which are not the variables are selected, an error message is displayed about the dimensions not matching eg. if var <- .A.[,6] we are shown 'Error in .A.[, 6] : subscript out of bounds'.
.A. <- A..[, 1 : Y]
.A.
var <- A.[,max]
#We know fro b what the given column is which is named max. The given column  can only be between the 3rd and 2+Y th columns but I am using an extrapolated version of the tableau, which is M in the notes so that if any columns which are not the variables are selected, an error message is displayed about the dimensions not matching eg. if var <- .A.[,6] we are shown 'Error in .A.[, 6] : subscript out of bounds'.
.A. <- A.[, 1 : Y]
.A.
var <- A.[,max]
#We know fro b what the given column is which is named max. The given column  can only be between the 3rd and 2+Y th columns but I am using an extrapolated version of the tableau, which is M in the notes so that if any columns which are not the variables are selected, an error message is displayed about the dimensions not matching eg. if var <- .A.[,6] we are shown 'Error in .A.[, 6] : subscript out of bounds'.
.A. <- A.[, 1 : Y]
.A.
var <- .A.[,max]
#We know fro b what the given column is which is named max. The given column  can only be between the 3rd and 2+Y th columns but I am using an extrapolated version of the tableau, which is M in the notes so that if any columns which are not the variables are selected, an error message is displayed about the dimensions not matching eg. if var <- .A.[,6] we are shown 'Error in .A.[, 6] : subscript out of bounds'.
.A. <- A.[, 1 : Y]
.A.
var <- A.[,max]
cB_T.M <- (t(cB))%*%(A)
cB_T.M
cB_T.BFS <- (t(cB))%*%BFS
cB_T.BFS
cB_T.M. <- cbind("Objective Row", "", cB_T.M, cB_T.BFS)
cB_T.M.
c__cB_T.M <- C - cB_T.M[1:Y]
c__cB_T.M
c__cB_T.M. <- cbind("Simplex Coefficients", "", t(c__cB_T.M), "")
c__cB_T.M.
A.... <- rbind (A..., cB_T.M., c__cB_T.M.)
A.
A..
A...
A....
max <- which.max(t(c__cB_T.M))
max
#We know fro b what the given column is which is named max. The given column  can only be between the 3rd and 2+Y th columns but I am using an extrapolated version of the tableau, which is M in the notes so that if any columns which are not the variables are selected, an error message is displayed about the dimensions not matching eg. if var <- .A.[,6] we are shown 'Error in .A.[, 6] : subscript out of bounds'.
.A. <- A.[, 1 : Y]
.A.
var <- A.[,max]
Ratios <- BFS / var
Ratios
minpositive = function(x) min(x[x > 0])
minpositive(Ratios)
match (minpositive(Ratios), Ratios)
x <- length(c)
y <- nrow(con)
I <- diag(x = 1, nrow = y, ncol = y)
A <- cbind(con, I)
A. <- cbind(con, I, bfs)
A.
S <- rep(0, y)
#Finding where the initial basis lies which is between x+1 and x+y
X <- x + 1
Y <- x + y
B <- A[,c(X : Y)]
B
I.B <- c(X : Y)
I.B
s <- rep(0, y)
c
C <- c(c, s)
C
cB <- C[c(X : Y)]
cB
bfs. <- x + y + 1
BFS <- A.[,c(bfs.)]
BFS
x <- length(c)
y <- nrow(con)
I <- diag(x = 1, nrow = y, ncol = y)
s <- rep(0, y)
c
C <- c(c, s)
C
#(aii)
A <- cbind(con, I)
A. <- cbind(con, I, bfs)
A.
S <- rep(0, y)
#Finding where the initial basis lies which is between x+1 and x+y
X <- x + 1
Y <- x + y
B <- A[,c(X : Y)]
B
I.B <- c(X : Y)
I.B
cB <- C[c(X : Y)]
cB
bfs. <- x + y + 1
BFS <- A.[,c(bfs.)]
BFS
library(lpSolve)
f.obj1 <- c(1, 1)
f.con1 <- matrix(c(1, 2, 3, 1), nrow = 2, byrow = TRUE)
f.ineqs1 <- c("<=", "<=")
f.rhs1 <- c(100, 75)
lp("max", f.obj1, f.con1, f.ineqs1, f.rhs1)
lp("max", f.obj1, f.con1, f.ineqs1, f.rhs1)$solution
f.obj2 <- c(1, 1, 0, 0)
#Where the 3th and 4th column are the coefficients of the slack variables s1 and s2
f.con2 <- matrix(c(1, 2, 1, 0, 3, 1, 0, 1), nrow = 2, byrow = TRUE)
#Where the 3rd, 4th, 5th and 6th column are the coefficients of the slack variables s1 and s2
f.ineqs2 <- c("=", "=")
f.rhs2 <- c(100, 75)
lp("max", f.obj2, f.con2, f.ineqs2, f.rhs2)
lp("max", f.obj2, f.con2, f.ineqs2, f.rhs2)$solution
f.obj3 <- c(1, 1, 0, 0, 0)
f.con3 <- matrix(c(1, 2, 1, 0, 0, 3, 1, 0, 1, 0, 1, 3, 0, 0, 1), nrow = 3, byrow = TRUE)
f.ineqs3 <- c("=", "=", "=")
f.rhs3 <- c(100, 75, 150)
lp("max", f.obj3, f.con3, f.ineqs3, f.rhs3)
lp("max", f.obj3, f.con3, f.ineqs3, f.rhs3)$solution
f.obj4 <- c(1, 1, 0, 0)
x <- 99
f.con4 <- matrix(c(1, 2, 1, 0, 3, 1, 0, 1), nrow = 2, byrow = TRUE)
f.ineqs4 <- c("=", "=")
repeat{
f.rhs4 <- c(x, 75)
print(lp("max", f.obj4, f.con4, f.ineqs4, f.rhs4))
print(lp("max", f.obj4, f.con4, f.ineqs4, f.rhs4)$solution)
x <- x - 1
if (x == 0){
break}
}
bfs <- c(6, 4, 3)
c <- c(2, 3)
con <- rbind(c(1, 2), c(1, 1), c(1, 0))
con
x <- length(c)
y <- nrow(con)
I <- diag(x = 1, nrow = y, ncol = y)
s <- rep(0, y)
c
C <- c(c, s)
C
A <- cbind(con, I)
A. <- cbind(con, I, bfs)
A.
S <- rep(0, y)
#Finding where the initial basis lies which is between x+1 and x+y
X <- x + 1
Y <- x + y
B <- A[,c(X : Y)]
B
I.B <- c(X : Y)
I.B
cB <- C[c(X : Y)]
cB
bfs. <- x + y + 1
BFS <- A.[,c(bfs.)]
BFS
A.
Name <- c(1: Y)
Name
colnames (A.)[1:Y] <- paste (Name)
A.
#We now add cB and Basis to our matrix
C. <- c("", "", C, "")
#While it is not necessary to add this row onto the matrix, it helps with presentation
C.
A.. <- cbind(cB, I.B, A.)
A... <- rbind(C., A..)
A..
A...
cB_T.M <- (t(cB)) %*% (A)
cB_T.M
cB_T.BFS <- (t(cB))%*%BFS
cB_T.BFS
cB_T.M. <- cbind("Objective Row", "", cB_T.M, cB_T.BFS)
cB_T.M.
c__cB_T.M <- C - cB_T.M[1:Y]
c__cB_T.M
c__cB_T.M. <- cbind("Simplex Coefficients", "", t(c__cB_T.M), "")
c__cB_T.M.
A.... <- rbind (A..., cB_T.M., c__cB_T.M.)
A.
A..
A...
A....
max <- which.max(t(c__cB_T.M))
max
#We know fro b what the given column is which is named max. The given column  can only be between the 3rd and 2+Y th columns but I am using an extrapolated version of the tableau, which is M in the notes so that if any columns which are not the variables are selected, an error message is displayed about the dimensions not matching eg. if var <- .A.[,6] we are shown 'Error in .A.[, 6] : subscript out of bounds'.
.A. <- A.[, 1 : Y]
.A.
var <- A.[,max]
Ratios <- BFS / var
Ratios
minpositive = function(x) min(x[x > 0])
minpositive(Ratios)
match (minpositive(Ratios), Ratios)
library(lpSolve)
f.obj<- c(1,1)
f.con <- matrix(c(1, 2, 3, 1),nrow=2, byrow=TRUE)
f.ineqs<-c(">=",">=")
f.rhs <- c(100,75)
lp("min",f.obj,f.con,f.ineqs,f.rhs)
lp("min",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2, 1, 0, 3, 1, 0, 1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(100,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0,0)
f.con <- matrix(c(1, 2, 1, 0, 0, 3, 1, 0, 1, 0, 1, 3, 0, 0, 1),nrow=3, byrow=TRUE)
f.ineqs<-c("=","=", "=")
f.rhs <- c(100,75,150)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(99,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(99,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
library(lpSolve)
f.obj<- c(1,1)
f.con <- matrix(c(1, 2, 3, 1),nrow=2, byrow=TRUE)
f.ineqs<-c("<=","<=")
f.rhs <- c(98,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(98,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(97,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(96,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
bn=1
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(bn,75)
obn=lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
ob=rep(0,4)
if( t(obn) != t(ob) )
bn=bn+1
ob=obn
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(bn,75)
obn=lp("max",f.obj,f.con,f.ineqs,f.rhs)$solutio
return(ob)
library(lpSolve)
f.obj<- c(1,1)
f.con <- matrix(c(1, 2, 3, 1),nrow=2, byrow=TRUE)
f.ineqs<-c(">=",">=")
f.rhs <- c(100,75)
lp("min",f.obj,f.con,f.ineqs,f.rhs)
lp("min",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2, 1, 0, 3, 1, 0, 1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(100,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0,0)
f.con <- matrix(c(1, 2, 1, 0, 0, 3, 1, 0, 1, 0, 1, 3, 0, 0, 1),nrow=3, byrow=TRUE)
f.ineqs<-c("=","=", "=")
f.rhs <- c(100,75,150)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(99,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(99,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
library(lpSolve)
f.obj<- c(1,1)
f.con <- matrix(c(1, 2, 3, 1),nrow=2, byrow=TRUE)
f.ineqs<-c("<=","<=")
f.rhs <- c(98,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(98,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(97,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(96,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
bn=1
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(bn,75)
obn=lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
ob=rep(0,4)
if( t(obn) != t(ob) )
bn=bn+1
ob=obn
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(bn,75)
obn=lp("max",f.obj,f.con,f.ineqs,f.rhs)$solutio
#return(ob)
rep(-2,8)
diag(4)
help(cbind)
help(t)
help(c)
help(%*%)
library(lpSolve)
f.obj<- c(1,1)
f.con <- matrix(c(1, 2, 3, 1),nrow=2, byrow=TRUE)
f.ineqs<-c(">=",">=")
f.rhs <- c(100,75)
lp("min",f.obj,f.con,f.ineqs,f.rhs)
lp("min",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2, 1, 0, 3, 1, 0, 1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(100,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0,0)
f.con <- matrix(c(1, 2, 1, 0, 0, 3, 1, 0, 1, 0, 1, 3, 0, 0, 1),nrow=3, byrow=TRUE)
f.ineqs<-c("=","=", "=")
f.rhs <- c(100,75,150)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(99,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(99,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
library(lpSolve)
f.obj<- c(1,1)
f.con <- matrix(c(1, 2, 3, 1),nrow=2, byrow=TRUE)
f.ineqs<-c("<=","<=")
f.rhs <- c(98,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs)
lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(98,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(97,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
library(lpSolve)
f.obj<- c(1,1,0,0)
f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
f.ineqs<-c("=","=")
f.rhs <- c(96,75)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)
lp("max",f.obj,f.con,f.ineqs,f.rhs, int.vec = 1:2)$solution
#bn=1
#library(lpSolve)
#f.obj<- c(1,1,0,0)
#f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
#f.ineqs<-c("=","=")
#f.rhs <- c(bn,75)
#obn=lp("max",f.obj,f.con,f.ineqs,f.rhs)$solution
#ob=rep(0,4)
#if( t(obn) != t(ob) )
# bn=bn+1
#ob=obn
#library(lpSolve)
#f.obj<- c(1,1,0,0)
#f.con <- matrix(c(1, 2,1,0, 3, 1,0,1),nrow=2, byrow=TRUE)
#f.ineqs<-c("=","=")
#f.rhs <- c(bn,75)
#obn=lp("max",f.obj,f.con,f.ineqs,f.rhs)$solutio
#return(ob)
rep(-2,8)
diag(4)
help(cbind)
help(t)
help(c)
help(%*%)
#help(%*%)
help("which")
help("which.min")
#Co=c(2,3)
#sl=c(rep(0,3))
#ob=cbind(C,sl)
ob=c(2,3,0,0,0)
cb=rep(0,3)
x1=c(1,1,1)
x2=c(2,1,0)
#s=diag(3)  decided to enter s1,s2,s3 seperatly so rows are labled
s1=c(1,0,0)
s2=c(0,1,0)
s3=c(0,0,1)
bfs=c(6,4,3)
a=cbind(x1,x2,s)
#Co=c(2,3)
#sl=c(rep(0,3))
#ob=cbind(C,sl)
ob=c(2,3,0,0,0)
cb=rep(0,3)
x1=c(1,1,1)
x2=c(2,1,0)
s=diag(3)  decided to enter s1,s2,s3 seperatly so rows are labled
#Co=c(2,3)
#sl=c(rep(0,3))
#ob=cbind(C,sl)
ob=c(2,3,0,0,0)
cb=rep(0,3)
x1=c(1,1,1)
x2=c(2,1,0)
s=diag(3)
#decided to enter s1,s2,s3 seperatly so rows are labled
s1=c(1,0,0)
s2=c(0,1,0)
s3=c(0,0,1)
bfs=c(6,4,3)
a=cbind(x1,x2,s)
##b=(cb %% a) created a table of results not a 5 by 1 matrix I was trying to get. Googled to find out I was missing the star
b=cb%*%a
x=ob-b
#max(ob-b)
r=which.max(ob-b)
r
##x[,r] doesnt get the right answer as im trying to select the row in which is max
chosen.row=a[,r]
##Try and find a way to select the row using the answer to which.max(ob-b)
ratios=(bfs/chosen.row)
#min(ratios)
which.min(ratios)
